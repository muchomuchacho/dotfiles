if v:progname == 'vi'
  set noloadplugins
endif

let mapleader = ","
let maplocalleader="\\"

set nocompatible            " Disable compatibility to old-time vi

if has('nvim')
    set guicursor=n-v-c:block-Cursor/lCursor-blinkon0,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor
    set inccommand=nosplit
    noremap <C-q> :confirm qall<CR>
end

" Add fzf executable to the Vim runtime
source ~/.fzf/plugin/fzf.vim

cnoremap %s/ %sm/

""" Python VirtualEnv
if filereadable('/usr/local/bin/python3')
  let g:python3_host_prog = expand('/usr/local/bin/python3')
endif

let g:fzf_commits_log_options = '--graph --color=always
  \ --format="%C(yellow)%h%C(red)%d%C(reset)
  \ - %C(bold green)(%ar)%C(reset) %s %C(blue)<%an>%C(reset)"'

if has('viminfo') " ie. Vim.
  let s:viminfo='viminfo'
elseif has('shada') " ie. Neovim.
  let s:viminfo='shada'
endif

if exists('s:viminfo')
  if exists('$SUDO_USER')
    " Don't create root-owned files.
    execute 'set ' . s:viminfo . '='
  else
    " Defaults:
    "   Neovim: !,'100,<50,s10,h
    "   Vim:    '100,<50,s10,h
    "
    " - ! save/restore global variables (only all-uppercase variables)
    " - '100 save/restore marks from last 100 files
    " - <50 save/restore 50 lines from each register
    " - s10 max item size 10KB
    " - h do not save/restore 'hlsearch' setting
    "
    " Our overrides:
    " - '300 store marks for 300 files
    " - <100 save 100 lines per register
    " - s300 save 300 lines per register
    " - f1 store file marks
    " - h do not save 'hlsearch' marks
    " - n: store in ~/.vim/tmp
    "
    execute 'set ' . s:viminfo . "='300,<100,f1,s300,h,n~/.vim/tmp/" . s:viminfo

    if !empty(glob('~/.vim/tmp/' . s:viminfo))
      if !filereadable(expand('~/.vim/tmp/' . s:viminfo))
        echoerr 'warning: ~/.vim/tmp/' . s:viminfo . ' exists but is not readable'
      endif
    endif
  endif
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" # Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" They are installed as submodules
"" `git submodule add <plugin URL> configfiles/nvim/pack/bundle/opt/<pluin name>`
"" `git submodule update --init --recursive`

if &loadplugins
    if has('packages')
        " muchomuchacho
        " packadd! mpc
        " Functionality
        packadd! vim-commentary
        packadd! vim-fugitive
        packadd! vim-surround
        packadd! vim-mundo
        packadd! vim-repeat
        packadd! neomake
        packadd! scalpel
        packadd! vim-todo
        " packadd! vim-checkbox
        " Fuzzy finder
        packadd! fzf.vim
        packadd! vim-rooter
        " Syntactic language support
        packadd! vim-toml
        packadd! vim-yaml
        packadd! vim-markdown
        " Semantic language support
        packadd! coc.nvim
        packadd! semshi
        " Colorscheme
        packadd! gruvbox
        " Aesthetics
        packadd! vim-airline
        packadd! vim-airline-themes
        packadd! vim-devicons
    endif
endif

" Must come *after* the `:packadd!` calls above otherwise the contents of
" package "ftdetect" directories won't be evaluated.
filetype indent plugin on
syntax on

" After this file is sourced, plugin code will be evaluated.
" See ~/.vim/after for files evaluated after that.
" See `:scriptnames` for a list of all scripts, in evaluation order.
" Launch Vim with `vim --startuptime vim.log` for profiling info.
"
" To see all leader mappings, including those from plugins:
"
"   vim -c 'set t_te=' -c 'set t_ti=' -c 'map <space>' -c q | sort
