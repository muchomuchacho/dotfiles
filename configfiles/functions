#!/bin/env zsh

# Personal functions
## Make functions exportable
function exportf () {
    export $(echo $1)="`whence -f $1 | sed -e "s/$1 //"`"
}

## Prettyprint and colourize json responses from curl
function jcurl () {
    curl "$@" | json | pygmentize -l json
}
exportf jcurl

## Quick 'cd' for favoourite dirs
export CDPATH=.:~/.favdir
function cd () {
    if [[ -n "$1" ]]; then
        builtin cd -P "$1" > /dev/null
    else
        builtin cd -P ~ > /dev/null
    fi

    if [ -t ]; then
        pwd
    fi
}

# SSH using root by default
function sshr () {
    ssh root@$1
}

# Remove conflicting entry from the known_hosts file
function ssh_rhost () {
    ssh-keygen -f "${HOME}/.ssh/known_hosts" -R $1
}

# Chenge directory to the CT most recent one and run a HTTP server from there
function ct_http () {
    # Find IP with external access
    IP=$(ip route get 8.8.8.8 | awk 'NR==1 {print $NF}')
    Localhost="127.0.0.1"
    Port=8080
    if [[ -f /etc/os-release ]]; then
        linux_version=$(source /etc/os-release && echo $ID)
    fi
    if [[ ${linux_version} == "ubuntu" ]]; then
        printf "Running this outside the Gentoo host, IP (%s) won't be reachable. Bailing...\n" "${IP}"
        return
    elif [[ ${linux_version} == "gentoo" ]]; then
        (nc -z ${Localhost} ${Port} 2>&1)
        if [[ $? -ne 0  ]]; then
            printf "\nStarting HTTP server on %s %s\n" "${IP}:${Port}"
            (cd /home/"${USER}"/git/wood/functional/clusterdb/ct_logs && python -m SimpleHTTPServer 8080 2>&1)
        else
            printf "Port %s is already in use" "${Port}"
        fi
    fi
}

# Create a data URL from a file
function dataurl() {
    local mimeType=$(file -b --mime-type "$1");
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8";
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Run `dig` and display the most useful info
function digga() {
    dig +nocmd "$1" any +multiline +noall +answer;
}

function getcertnames() {
    if [ -z "${1}" ]; then
        echo "ERROR: No domain specified.";
        return 1;
    fi;

    local domain="${1}";
    echo "Testing ${domain}â€¦";
    echo ""; # newline

    local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
        | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

    if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
        local certText=$(echo "${tmp}" \
            | openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
            no_serial, no_sigdump, no_signame, no_validity, no_version");
        echo "Common Name:";
        echo ""; # newline echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
        echo ""; # newline
        echo "Subject Alternative Name(s):";
        echo ""; # newline
        echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
            | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
        return 0;
    else
        echo "ERROR: Certificate not found.";
        return 1;
    fi;
}

function tre() {
    tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

function lb() {
    journalfile=~/Seafile/logbook/$(date '+%Y-%m-%d').md
    NOW=$(date)
    if [ ! -f $journalfile ]; then
        touch $journalfile
        echo "## ""_"${NOW}"_" >> $journalfile
    else
        echo "Continue with todays one...: $journalfile"
        echo "### "${NOW} >> $journalfile
    fi
    nvim $journalfile
}

fzf_find_edit () {
    local file=$(
      fzf --query="$1" --no-multi --select-1 --exit-0 \
          --preview 'bat --color=always --line-range :500 {}'
      )
    if [[ -n $file ]]; then
        $EDITOR "$file"
    fi
}

fzf_git_log() {
    local selections=$(
      git ll --color=always "$@" |
        fzf --ansi --no-sort --height 100% \
            --preview "echo {} | grep -o '[a-f0-9]\{7\}' | head -1 |
                       xargs -I@ sh -c 'git show --color=always @'"
      )
    if [[ -n $selections ]]; then
        local commits=$(echo "$selections" | cut -d' ' -f2 | tr '\n' ' ')
        git show $commits
    fi
}

# Install one or more versions of specified language
# e.g. `vmi rust` # => fzf multimode, tab to mark, enter to install
# if no plugin is supplied (e.g. `vmi<CR>`), fzf will list them for you
# Mnemonic [V]ersion [M]anager [I]nstall
vmi() {
  local lang=${1}

  if [[ ! $lang ]]; then
    lang=$(asdf plugin-list | fzf)
  fi

  if [[ $lang ]]; then
    local versions=$(asdf list-all $lang | tail -r | fzf -m)
    if [[ $versions ]]; then
      for version in $(echo $versions);
      do; asdf install $lang $version; done;
    fi
  fi
}

# Use fd and fzf to get the args to a command.
# Works only with zsh
# Examples:
# f mv # To move files. You can write the destination after selecting the files.
# f 'echo Selected:'
# f 'echo Selected music:' --extention mp3
# fm rm # To rm files in current directory
f() {
    sels=( "${(@f)$(fd "${fd_default[@]}" "${@:2}"| fzf)}" )
    test -n "$sels" && print -z -- "$1 ${sels[@]:q:q}"
}
