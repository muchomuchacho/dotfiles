if v:progname == 'vi'
  set noloadplugins
endif

let mapleader = "\<Space>"
let maplocalleader="\\"

set nocompatible            " Disable compatibility to old-time vi

" Add fzf executable to the Vim runtime
source ~/.fzf/plugin/fzf.vim

" set clipboard+=unnamed      " make the clipboard available across apps

" set showmatch               " Show matching brackets.

" set tabstop=4 softtabstop=4 shiftwidth=4 expandtab smarttab

" Proper search
set incsearch ignorecase smartcase hlsearch

cnoremap %s/ %sm/

""" Python VirtualEnv
let g:python_host_prog = expand('/usr/local/bin/python')
let g:python3_host_prog = expand('/usr/local/bin/python3')

let g:fzf_commits_log_options = '--graph --color=always
  \ --format="%C(yellow)%h%C(red)%d%C(reset)
  \ - %C(bold green)(%ar)%C(reset) %s %C(blue)<%an>%C(reset)"'

function! GrepForWord(cmd)
  execute a:cmd expand('<cword>')
endfunction

" Airline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#coc#enabled = 1
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Completion
" Better display for messages
set cmdheight=2
" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300
" always show signcolumns
set signcolumn=yes
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-.> to trigger completion.
inoremap <silent><expr> <c-.> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
" inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

set completeopt-=menu
set completeopt+=menuone   " show the popup menu even when there is only 1 match
set completeopt-=longest   " don't insert the longest common text
set completeopt+=preview   " don't show preview window
set completeopt+=noinsert  " don't insert any text until user chooses a match
set completeopt-=noselect  " select first match

" Disable documentation window
set completeopt-=preview

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" # Editor settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set scrolloff=3
set shortmess+=I
set shortmess+=A
set shortmess+=a

if has ('syntax')
    set spellcapcheck=
endif

set noshowmode
set hidden
" set nowrap
set wrap
set nojoinspaces
let g:sneak#s_next = 1
let g:vim_markdown_new_list_item_indent = 0
let g:vim_markdown_auto_insert_bullets = 0
let g:vim_markdown_frontmatter = 1
set printfont=:h10
set printencoding=utf-8
set printoptions=paper:letter
" Always draw sign column. Prevent buffer moving when adding/deleting sign.
set signcolumn=yes
" Sane splits
if has('windows')
    set splitbelow
endif

if has('vertsplit')
    set splitright
endif

" Move around splits
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Line breaks
if has('linebreak')
    let &showbreak='â¤· '
endif

if has('linebreak')
    set breakindent
    if exists('&breakindentopt')
        set breakindentopt=shift:2
    endif
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" # Keyboard
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" # Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" They are installed as submodules
"" `git submodule add <plugin URL> configfiles/nvim/pack/bundle/opt/<pluin name>`
"" `git submodule update --init --recursive`

if &loadplugins
    if has('packages')
        " Aesthetics
        packadd! vim-airline
        packadd! vim-airline-themes
        packadd! vim-devicons
        " Functionality
        packadd! vim-commentary
        packadd! vim-fugitive
        packadd! vim-surround
        packadd! neomake
        " packadd! vim-mundo
        packadd! scalpel
        " Fuzzy finder
        packadd! fzf.vim
        packadd! vim-rooter
        " Syntactic language support
        packadd! vim-toml
        packadd! vim-yaml
        packadd! vim-markdown
        " Semantic language support
        packadd! coc.nvim
        " Colorscheme
        packadd! gruvbox
    endif
endif

" Must come *after* the `:packadd!` calls above otherwise the contents of
" package "ftdetect" directories won't be evaluated.
filetype indent plugin on
syntax on

" After this file is sourced, plugin code will be evaluated.
" See ~/.vim/after for files evaluated after that.
" See `:scriptnames` for a list of all scripts, in evaluation order.
" Launch Vim with `vim --startuptime vim.log` for profiling info.
"
" To see all leader mappings, including those from plugins:
"
"   vim -c 'set t_te=' -c 'set t_ti=' -c 'map <space>' -c q | sort
