#!/usr/bin/env zsh
##############################
# DOTFILES
##############################

HOSTTYPE=$(uname -s)
base_dir="$(git rev-parse --show-toplevel)"
bin_dir=${HOME}/bin/
home_config=${HOME}/.config/
alacritty_dir=${home_config}alacritty/
olddir=${HOME}/.dotfiles_old
home_files="tmux.conf gitignore_global functions exports aliases zpreztorc zshrc"
datestr=$(date -u "+%Y%m%d-%H%M")
bak_dir=${olddir}-${datestr}
mk_dirs=("${bin_dir}" "${home_config}" "${alacritty_dir}" "${bak_dir}")

##############################
# Helper functions
##############################

function command_exists {
    command -v "$@" > /dev/null 2>&1
}

function result {
    if [ ${?} = 0 ]; then
        printf ' [\033[0;32mOK\033[0m]\n'
    else
        printf ' [\033[0;31mERROR\033[0m]\n'
    fi
}

if ! command_exists curl; then
  echo "Please install curl and run this script again"
fi

if ! command_exists git; then
  echo "Please install git and run this script again"
fi

function mk_conf_dir() {
  for new_dir in ${mk_dirs[@]}; do
    echo "Creating ${new_dir} if necessary."
    [ ! -d "${new_dir}" ] && mkdir -p "${new_dir}"
  done
  result
}

##############################

if [ "${HOSTTYPE}" != "Linux" ]; then
    home_files=(${home_files} gvimrc-nonlinux)
else
    home_files=(${home_files} gvimrc)
fi

echo "Checking for existence of directory structure."
mk_conf_dir

# echo "Create ${home_config} if it does not exist"
# mk_dir "${home_config}"

# echo "Creating ${olddir}-${datestr} to backup any existing dotfiles in ~"
# mk_dir "${olddir}-${datestr}"

if [ -z "${ZSH_VERSION}" ]; then
    echo "This script needs to be run from a zsh shell"
    echo "Setting up ZSH as the default shell..."
    echo "Please open a new iTerm window and re-run this script"
    chsh -s $(which zsh)
    exit 1
fi

##############################
# INSTALL FUNCTIONS
##############################

function install_asdf() {
  if [ ! -d "~/.asdf" ]; then
    # Install asdf
    git clone https://github.com/asdf-vm/asdf.git ~/.asdf
  fi
}

function install_prezto() {
  echo "Installing prezto"
  zsh_files=(zlogin zlogout zpreztorc zprofile zshenv zshrc)

  if [ ! -d "${HOME}/.zprezto" ]; then
      cp -a "${base_dir}/external/prezto" "${HOME}/.zprezto"
  fi
  for file in ${zsh_files}; do
      if [ -e "${HOME}/.${file}" ]; then
          rm -f "${HOME}/.${file}"
      fi
  done
  result

  setopt EXTENDED_GLOB
  echo "Creating prezto symlinks..."
  for rcfile in "${ZDOTDIR:-$HOME}"/.zprezto/runcoms/^README.md(.N); do
      [[ $(basename $rcfile) == "zshrc" || $(basename $rcfile) == "zpreztorc" ]] || ln -s "$rcfile" "${ZDOTDIR:-$HOME}/.${rcfile:t}"
  done

  # setup the all the home dotfiles
  homefiles_setup
}

function check_linters() {
  missing_linters=0
  linters=(shellcheck flake8 pep8)
  for linter in ${linters}; do
      if ! command_exists "${linter}"; then
          ((missing_linters++))
          echo "${linter} not found. Please install"
      fi
  done

  if [[ $missing_linters -gt 0 ]]; then
      printf "You are missing %s linters [\033[0;31mERROR\033[0m]\n" "$missing_linters"
  else
      printf "All expected linters were detected. [\033[0;32mOK\033[0m]\n"
  fi
  result
}

function git_setup() {
  echo "Set up some GIT basic config"

  # Set privacy email for this repo (dotfiles)
  git config user.email 4213495+muchomuchacho@users.noreply.github.com
  # Git lg alias: https://coderwall.com/p/euwpig/a-better-git-log
  git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
  # Alias to recursively get submodule status
  git config --global alias.sb "submodule foreach \"git status\""
  # Gitignore globals
  git config --global core.excludesfile "$HOME/.gitignore_global"
  # Simple git pushing
  git config --global push.default simple
  # Set editor
  git config --global core.editor nvim
  # Set git d as difftool -> vimdiff
  git config --global diff.tool vimdiff
  git config --global difftool.prompt false
  git config --global alias.d difftool
  result
}

function mac_setup() {
  if [[ "${HOSTTYPE}" = "Darwin" ]]; then
      echo
      echo "Ah, this is a Mac, let's do some Mac setup too!"
      if ! command_exists brew; then
          ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
      fi
      if [ ! -f ~/.xvimrc ]; then
          ln -s ~/.vimrc ~/.xvimrc
      fi
      for f in ${base_dir}/${HOSTTYPE}/Library/Preferences/*; do
          echo "Copy app preferences into ~/Library folder"
          cp -n "${f}" "${HOME}/Library/Preferences" && \
              echo "Copied ${f} into ${HOME}/Library/Preferences/"
      done
      defaults write -g KeyRepeat -int 2
      defaults write -g ApplePressAndHoldEnabled -bool false
      echo "Installing brew application bundle. It includes fonts, dev apps and other utilities"
      brew bundle
      result
  fi
}

function process_files() {
  source_path=$1
  dest_path=$2
  files=$3
  echo "Backing up dotfiles to files from ~ to ${bak_dir}"
  echo "SOURCE PATH: ${source_path}"
  echo "FIRST ARGUMENT: $1"
  for file in ${files[@]}; do
      if [ -d "${dest_path}${file}" ]; then
          cp -LR "${dest_path}${file}" "${bak_dir}/.config"
          echo -n "Backing up and deleting ${dest_path}${file}\n"
          rm -rf "${dest_path}${file}"
      elif [ -e "${dest_path}${file}" ]; then
          cp -L "${dest_path}${file}" "${bak_dir}/.config"
          echo -n "Backing up and deleting ${dest_path}${file}\n"
          rm -f "${dest_path}${file}"
      elif file "${dest_path}${file}" | grep "broken symbolic link"; then
          rm "${dest_path}${file}"
      fi
      destfile=${file}
      echo "Creating symlink to ${file} in ${dest_path} directory.\n"
      if [ "${file}" = "vim" ]; then
        file="nvim"
      fi
      ln -s "${source_path}${file}" "${dest_path}${destfile}"
      result
  done
}

function vim_setup() {
  setopt shwordsplit
  process_files "${base_dir}/configfiles/" "${home_config}" "nvim"
  process_files "${base_dir}/configfiles/" "${HOME}/." "vim vimrc"
  process_files "${base_dir}/external/bin/" "${bin_dir}" "generate-vimwiki-diary-template"
  process_files "${base_dir}/external/bin/" "${bin_dir}" "vwtags.py"

  # clone and initiate submodules
  git submodule update --init --recursive
  # update submodules to the tip of the branch
  git submodule update --recursive --remote

  unsetopt shwordsplit
}

function homefiles_setup() {
  setopt shwordsplit
  process_files "${base_dir}/configfiles/" "${HOME}/." "${home_files}"
  process_files "${base_dir}/configfiles/" "${alacritty_dir}" "alacritty.yml"
  unsetopt shwordsplit

  prompts=(prompt_wikimatze_setup)
  for prompt in ${prompts}; do
      cp -a "${base_dir}/external/prezto_dots/${prompt}" "${HOME}/.zprezto/modules/prompt/functions/${prompt}"
      result
  done
}

###################################################################################
# Execute install functions (Uncomment the function calls that you wish to install)
###################################################################################

# install_prezto
# install_asdf
vim_setup
# homefiles_setup
# git_setup
# mac_setup
# check_linters

echo
echo "Dotfiles bootstrap complete."
